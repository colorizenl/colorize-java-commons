//-----------------------------------------------------------------------------
// Colorize Java Commons
// Copyright 2007-2025 Colorize
// Apache license (http://www.apache.org/licenses/LICENSE-2.0)
//-----------------------------------------------------------------------------

package nl.colorize.util.cli;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * <a href="https://en.wikipedia.org/wiki/ANSI_escape_code">ANSI escape codes</a>
 * to format command line output in a more human-readable way. This class
 * intentionally does not support white or black, since both black-on-white
 * and white-on-black terminals are widely used, so this avoids formatting
 * that would make the text unreadable.
 */
public enum AnsiColor {

    RED("\u001B[31m"),
    GREEN("\u001B[32m"),
    YELLOW("\u001B[33m"),
    BLUE("\u001B[34m"),
    MAGENTA("\u001B[35m"),
    CYAN("\u001B[36m"),

    RED_BOLD("\u001B[1m\u001B[31m"),
    GREEN_BOLD("\u001B[1m\u001B[32m"),
    YELLOW_BOLD("\u001B[1m\u001B[33m"),
    BLUE_BOLD("\u001B[1m\u001B[34m"),
    MAGENTA_BOLD("\u001B[1m\u001B[35m"),
    CYAN_BOLD("\u001B[1m\u001B[36m");

    private String prefix;
    private String suffix;

    private static final Pattern ANSI_ESCAPE_CODE_PATTERN = Pattern.compile("\u001B\\[[\\d;]+m");

    private AnsiColor(String prefix) {
        this.prefix = prefix;
        this.suffix = "\u001B[0m";
    }

    /**
     * Formats the specified text using this color and styling. Returns the
     * formatting string including ANSI escape codes.
     */
    public String format(String text) {
        return prefix + text + suffix;
    }

    /**
     * Formats the specified text using this color and styling, then prints the
     * result to {@code stdout}. Using this method is a shorthand/convenience
     * version of {@code System.out.print(format(text))}.
     */
    public void print(String text) {
        System.out.print(format(text));
    }

    /**
     * Formats the specified text using this color and styling, then prints the
     * result to {@code stdout}. Using this method is a shorthand/convenience
     * version of {@code System.out.println(format(text))}.
     */
    public void println(String text) {
        System.out.println(format(text));
    }

    /**
     * Removes all ANSI escape codes from a string. This method can be used to
     * reverse the effects of {@link #format(String)}, or to remove ANSI escape
     * codes generated by other means.
     */
    public static String clean(String text) {
        Matcher matcher = ANSI_ESCAPE_CODE_PATTERN.matcher(text);
        return matcher.replaceAll("");
    }
}
